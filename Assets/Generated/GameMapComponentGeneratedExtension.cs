//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public GameMapComponent gameMap { get { return (GameMapComponent)GetComponent(ComponentIds.GameMap); } }

        public bool hasGameMap { get { return HasComponent(ComponentIds.GameMap); } }

        public Entity AddGameMap(Entitas.Entity[,] newGrid) {
            var component = CreateComponent<GameMapComponent>(ComponentIds.GameMap);
            component.grid = newGrid;
            return AddComponent(ComponentIds.GameMap, component);
        }

        public Entity ReplaceGameMap(Entitas.Entity[,] newGrid) {
            var component = CreateComponent<GameMapComponent>(ComponentIds.GameMap);
            component.grid = newGrid;
            ReplaceComponent(ComponentIds.GameMap, component);
            return this;
        }

        public Entity RemoveGameMap() {
            return RemoveComponent(ComponentIds.GameMap);
        }
    }

    public partial class Pool {
        public Entity gameMapEntity { get { return GetGroup(Matcher.GameMap).GetSingleEntity(); } }

        public GameMapComponent gameMap { get { return gameMapEntity.gameMap; } }

        public bool hasGameMap { get { return gameMapEntity != null; } }

        public Entity SetGameMap(Entitas.Entity[,] newGrid) {
            if (hasGameMap) {
                throw new EntitasException("Could not set gameMap!\n" + this + " already has an entity with GameMapComponent!",
                    "You should check if the pool already has a gameMapEntity before setting it or use pool.ReplaceGameMap().");
            }
            var entity = CreateEntity();
            entity.AddGameMap(newGrid);
            return entity;
        }

        public Entity ReplaceGameMap(Entitas.Entity[,] newGrid) {
            var entity = gameMapEntity;
            if (entity == null) {
                entity = SetGameMap(newGrid);
            } else {
                entity.ReplaceGameMap(newGrid);
            }

            return entity;
        }

        public void RemoveGameMap() {
            DestroyEntity(gameMapEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherGameMap;

        public static IMatcher GameMap {
            get {
                if (_matcherGameMap == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.GameMap);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherGameMap = matcher;
                }

                return _matcherGameMap;
            }
        }
    }
}
