//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public SceneComponent scene { get { return (SceneComponent)GetComponent(GameComponentIds.Scene); } }
        public bool hasScene { get { return HasComponent(GameComponentIds.Scene); } }

        public Entity AddScene(string newSceneName) {
            var component = CreateComponent<SceneComponent>(GameComponentIds.Scene);
            component.sceneName = newSceneName;
            return AddComponent(GameComponentIds.Scene, component);
        }

        public Entity ReplaceScene(string newSceneName) {
            var component = CreateComponent<SceneComponent>(GameComponentIds.Scene);
            component.sceneName = newSceneName;
            ReplaceComponent(GameComponentIds.Scene, component);
            return this;
        }

        public Entity RemoveScene() {
            return RemoveComponent(GameComponentIds.Scene);
        }
    }

    public partial class Context {

        public Entity sceneEntity { get { return GetGroup(GameMatcher.Scene).GetSingleEntity(); } }
        public SceneComponent scene { get { return sceneEntity.scene; } }
        public bool hasScene { get { return sceneEntity != null; } }

        public Entity SetScene(string newSceneName) {
            if(hasScene) {
                throw new EntitasException("Could not set scene!\n" + this + " already has an entity with SceneComponent!",
                    "You should check if the context already has a sceneEntity before setting it or use context.ReplaceScene().");
            }
            var entity = CreateEntity();
            entity.AddScene(newSceneName);
            return entity;
        }

        public Entity ReplaceScene(string newSceneName) {
            var entity = sceneEntity;
            if(entity == null) {
                entity = SetScene(newSceneName);
            } else {
                entity.ReplaceScene(newSceneName);
            }

            return entity;
        }

        public void RemoveScene() {
            DestroyEntity(sceneEntity);
        }
    }
}

    public partial class GameMatcher {

        static IMatcher _matcherScene;

        public static IMatcher Scene {
            get {
                if(_matcherScene == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameComponentIds.Scene);
                    matcher.componentNames = GameComponentIds.componentNames;
                    _matcherScene = matcher;
                }

                return _matcherScene;
            }
        }
    }
